exports[`toHaveTagName mount provides contextual information for the message (mount) 1`] = `
Object {
  "actual": "<a id=\"a\"></a>",
}
`;

exports[`toHaveTagName mount provides the right info for when this method is called with multiple nodes 1`] = `
Object {
  "contextualInformation": Object {},
  "message": "toHaveTagName must be called on a single node, not multiple nodes.",
  "negatedMessage": "toHaveTagName must be called on a single node, not multiple nodes.",
  "pass": false,
}
`;

exports[`toHaveTagName mount returns the message with the proper fail verbage (mount) 1`] = `"Expected <a> node not to equal (using ===) type \"a\" but it is that type."`;

exports[`toHaveTagName mount returns the message with the proper pass verbage (mount) 1`] = `"Expected <a> node to equal (using ===) type \"a\" but it is a \"a\"."`;

exports[`toHaveTagName mount works on composite functions 1`] = `
Object {
  "contextualInformation": Object {
    "actual": "<div><span id=\"span\"></span><span></span><a id=\"a\"></a></div>",
  },
  "message": "Expected <Fixture> node to equal (using ===) type \"Fixture\" but it is a \"Fixture\".",
  "negatedMessage": "Expected <Fixture> node not to equal (using ===) type \"Fixture\" but it is that type.",
  "pass": true,
}
`;

exports[`toHaveTagName mount works on composite functions 2`] = `
Object {
  "contextualInformation": Object {
    "actual": "<div><span id=\"span\"></span><span></span><a id=\"a\"></a></div>",
  },
  "message": "Expected <Fixture> node to equal (using ===) type \"a\" but it is a \"Fixture\".",
  "negatedMessage": "Expected <Fixture> node not to equal (using ===) type \"a\" but it is that type.",
  "pass": false,
}
`;

exports[`toHaveTagName shallow provides contextual information for the message (shallow) 1`] = `
Object {
  "actual": "<a id=\"a\"></a>",
}
`;

exports[`toHaveTagName shallow provides the right info for when this method is called with multiple nodes 1`] = `
Object {
  "contextualInformation": Object {},
  "message": "toHaveTagName must be called on a single node, not multiple nodes.",
  "negatedMessage": "toHaveTagName must be called on a single node, not multiple nodes.",
  "pass": false,
}
`;

exports[`toHaveTagName shallow returns the message with the proper fail verbage (shallow) 1`] = `"Expected <a> node not to equal (using ===) type \"a\" but it is that type."`;

exports[`toHaveTagName shallow returns the message with the proper pass verbage (shallow) 1`] = `"Expected <a> node to equal (using ===) type \"a\" but it is a \"a\"."`;

exports[`toHaveTagName shallow works on composite functions 1`] = `
Object {
  "contextualInformation": Object {
    "actual": "<div><span id=\"span\"></span><span></span><a id=\"a\"></a></div>",
  },
  "message": "Expected <Fixture> node to equal (using ===) type \"Fixture\" but it is a \"div\".",
  "negatedMessage": "Expected <Fixture> node not to equal (using ===) type \"Fixture\" but it is that type.",
  "pass": false,
}
`;

exports[`toHaveTagName shallow works on composite functions 2`] = `
Object {
  "contextualInformation": Object {
    "actual": "<div><span id=\"span\"></span><span></span><a id=\"a\"></a></div>",
  },
  "message": "Expected <Fixture> node to equal (using ===) type \"a\" but it is a \"div\".",
  "negatedMessage": "Expected <Fixture> node not to equal (using ===) type \"a\" but it is that type.",
  "pass": false,
}
`;
