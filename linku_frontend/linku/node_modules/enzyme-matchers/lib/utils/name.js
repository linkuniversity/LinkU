'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; }; /*
                                                                                                                                                                                                                                                   * @function name
                                                                                                                                                                                                                                                   * 
                                                                                                                                                                                                                                                   * @returns string
                                                                                                                                                                                                                                                   */

exports.default = getNameFromArbitraryWrapper;

var _instance = require('./instance');

var _instance2 = _interopRequireDefault(_instance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Gets the name of the node or component for the SINGLE item
 */
function getNameFromRoot(root) {
  // shallow
  if (root.unrendered) {
    var type = root.unrendered.type;

    return type.name || type;
  }

  var inst = (0, _instance2.default)(root);
  if (inst) {
    return inst._tag;
  }

  // direct node
  if (typeof root.type === 'string') {
    return root.type;
  }

  return typeof root.name === 'function' ? root.name() : '(anonymous)';
}

/*
 * Can take any sort of wrapper. A single node, a component,
 * multiple nodes, multiple components.
 *
 * examples of outputs:
 * - "Fixture"
 * - "input"
 * - "(anonymous)"
 * - "Fixture, 2 "span" nodes found"
 * - "Fixture, 2 mixed nodes found"
 */
function getNameFromArbitraryWrapper(wrapper) {
  var nodeCount = wrapper.nodes.length;

  switch (nodeCount) {
    case 0:
      {
        return '[empty set]';
      }
    case 1:
      {
        return getNameFromRoot(wrapper);
      }
    default:
      {
        var _ret = function () {
          var nodeTypeMap = {};

          // determine if we have a mixed list of nodes or not
          wrapper.nodes.forEach(function (node) {
            var name = getNameFromRoot(node);
            nodeTypeMap[name] = (nodeTypeMap[name] || 0) + 1;
          });

          var nodeTypeList = Object.keys(nodeTypeMap);

          var nodeTypes = nodeTypeList.length === 1 ? nodeTypeList[0] : 'mixed';

          var root = getNameFromRoot(wrapper.root);

          return {
            v: root + ', ' + nodeCount + ' ' + nodeTypes + ' nodes found'
          };
        }();

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
      }
  }
}
module.exports = exports['default'];